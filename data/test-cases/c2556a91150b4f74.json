{
  "uid" : "c2556a91150b4f74",
  "name" : "test_linkedinSocialIcon",
  "fullName" : "test_regression_suite.FooterTests#test_linkedinSocialIcon",
  "historyId" : "ba7e7324dd079aa2b4969ed609ada013",
  "time" : {
    "start" : 1592046176528,
    "stop" : 1592046201589,
    "duration" : 25061
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_linkedinSocialIcon>\n\n    def test_linkedinSocialIcon(self):\n        result = self.fp.getLinkedInIconStatus()\n>       self.ts.markFinal(\"test_linkedinSocialIcon\", result, \"Footer_Verified LinkedIn Social Icon\")\n\nhome\\footer_test.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x000002152D53AE20>\ntestName = 'test_linkedinSocialIcon', result = False\nresultMessage = 'Footer_Verified LinkedIn Social Icon'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1592045839483,
      "stop" : 1592045839483,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "classSetUp",
    "time" : {
      "start" : 1592046176527,
      "stop" : 1592046176527,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "oneTimeSetUp",
    "time" : {
      "start" : 1592045839484,
      "stop" : 1592045892569,
      "duration" : 53085
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1592045839483,
      "stop" : 1592045839483,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_linkedinSocialIcon>\n\n    def test_linkedinSocialIcon(self):\n        result = self.fp.getLinkedInIconStatus()\n>       self.ts.markFinal(\"test_linkedinSocialIcon\", result, \"Footer_Verified LinkedIn Social Icon\")\n\nhome\\footer_test.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x000002152D53AE20>\ntestName = 'test_linkedinSocialIcon', result = False\nresultMessage = 'Footer_Verified LinkedIn Social Icon'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5d8d0fb349e3f950",
      "name" : "Footer_Verified LinkedIn Social Icon.1592046201587",
      "source" : "5d8d0fb349e3f950.png",
      "type" : "image/png",
      "size" : 4195
    }, {
      "uid" : "62add635a9eff63",
      "name" : "log",
      "source" : "62add635a9eff63.txt",
      "type" : "text/plain",
      "size" : 1452
    }, {
      "uid" : "b2fffc5a0e90fc4e",
      "name" : "stdout",
      "source" : "b2fffc5a0e90fc4e.txt",
      "type" : "text/plain",
      "size" : 22
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "oneTimeSetUp::0",
    "time" : {
      "start" : 1592046301854,
      "stop" : 1592046304062,
      "duration" : 2208
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1592046304069,
      "stop" : 1592046304069,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_regression_suite"
  }, {
    "name" : "subSuite",
    "value" : "FooterTests"
  }, {
    "name" : "host",
    "value" : "EXIPC0154"
  }, {
    "name" : "thread",
    "value" : "11832-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_regression_suite"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "c2556a91150b4f74.json",
  "parameterValues" : [ ]
}