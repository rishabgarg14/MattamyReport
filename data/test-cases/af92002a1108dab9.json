{
  "uid" : "af92002a1108dab9",
  "name" : "test_accessibilityLink",
  "fullName" : "test_regression_suite.FooterTests#test_accessibilityLink",
  "historyId" : "a59194b10acd0ba8d82c13d9f5d7a51c",
  "time" : {
    "start" : 1589255112143,
    "stop" : 1589255113794,
    "duration" : 1651
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_accessibilityLink>\n\n    def test_accessibilityLink(self):\n        result = self.fp.getAccessibilityLinkStatus()\n>       self.ts.markFinal(\"test_accessibilityLink\", result, \"Footer_Verified Accessibility Link\")\n\nhome\\footer_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x0461D450>\ntestName = 'test_accessibilityLink', result = False\nresultMessage = 'Footer_Verified Accessibility Link'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "classSetUp",
    "time" : {
      "start" : 1589255112137,
      "stop" : 1589255112137,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "browser",
    "time" : {
      "start" : 1589255098291,
      "stop" : 1589255098291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "oneTimeSetUp",
    "time" : {
      "start" : 1589255098291,
      "stop" : 1589255112136,
      "duration" : 13845
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1589255098290,
      "stop" : 1589255098291,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_accessibilityLink>\n\n    def test_accessibilityLink(self):\n        result = self.fp.getAccessibilityLinkStatus()\n>       self.ts.markFinal(\"test_accessibilityLink\", result, \"Footer_Verified Accessibility Link\")\n\nhome\\footer_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x0461D450>\ntestName = 'test_accessibilityLink', result = False\nresultMessage = 'Footer_Verified Accessibility Link'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4d19c7b98ff058a2",
      "name" : "Footer_Verified Accessibility Link.1589255113790",
      "source" : "4d19c7b98ff058a2.png",
      "type" : "image/png",
      "size" : 41938
    }, {
      "uid" : "8de097cf09fb2195",
      "name" : "log",
      "source" : "8de097cf09fb2195.txt",
      "type" : "text/plain",
      "size" : 2254
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "oneTimeSetUp::0",
    "time" : {
      "start" : 1589255134353,
      "stop" : 1589255136655,
      "duration" : 2302
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1589255136665,
      "stop" : 1589255136665,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_regression_suite"
  }, {
    "name" : "subSuite",
    "value" : "FooterTests"
  }, {
    "name" : "host",
    "value" : "EXIPC0154"
  }, {
    "name" : "thread",
    "value" : "7652-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_regression_suite"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "386ca98129119c33",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589253197724,
        "stop" : 1589253198619,
        "duration" : 895
      }
    }, {
      "uid" : "c5a7980b7ddbdd65",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589216112494,
        "stop" : 1589216113555,
        "duration" : 1061
      }
    }, {
      "uid" : "b91bdc3161b052d5",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589207717921,
        "stop" : 1589207718888,
        "duration" : 967
      }
    }, {
      "uid" : "fd9ecbaafcb750a1",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589206266647,
        "stop" : 1589206267712,
        "duration" : 1065
      }
    }, {
      "uid" : "c9b63dd820ec6332",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589205341435,
        "stop" : 1589205342473,
        "duration" : 1038
      }
    }, {
      "uid" : "60c524b144ad0d70",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589203291097,
        "stop" : 1589203292341,
        "duration" : 1244
      }
    }, {
      "uid" : "3aff2cbdd0e7d1a2",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589163784249,
        "stop" : 1589163785330,
        "duration" : 1081
      }
    }, {
      "uid" : "ac7a7e03881493ac",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589113044013,
        "stop" : 1589113051130,
        "duration" : 7117
      }
    }, {
      "uid" : "f517e2d1fd7d56b0",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1588853649545,
        "stop" : 1588853650465,
        "duration" : 920
      }
    }, {
      "uid" : "b28c0b1d18078cec",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1588852328865,
        "stop" : 1588852330207,
        "duration" : 1342
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 11,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 11
      },
      "items" : [ {
        "uid" : "194cab9d2635c8ec",
        "reportUrl" : "http://localhost:8080/job/MattamyAutomationFramework/26/allure/#testresult/194cab9d2635c8ec",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589253197724,
          "stop" : 1589253198619,
          "duration" : 895
        }
      }, {
        "uid" : "307f11d48ee8ae41",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/25/allure/#testresult/307f11d48ee8ae41",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589216112494,
          "stop" : 1589216113555,
          "duration" : 1061
        }
      }, {
        "uid" : "c3b1ff86cb7f1cc1",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/24/allure/#testresult/c3b1ff86cb7f1cc1",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589207717921,
          "stop" : 1589207718888,
          "duration" : 967
        }
      }, {
        "uid" : "ffcabc29fdbc8e76",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/23/allure/#testresult/ffcabc29fdbc8e76",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589206266647,
          "stop" : 1589206267712,
          "duration" : 1065
        }
      }, {
        "uid" : "bc8d33ca34ba4079",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/22/allure/#testresult/bc8d33ca34ba4079",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589205341435,
          "stop" : 1589205342473,
          "duration" : 1038
        }
      }, {
        "uid" : "f80262115f630e47",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/21/allure/#testresult/f80262115f630e47",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589203291097,
          "stop" : 1589203292341,
          "duration" : 1244
        }
      }, {
        "uid" : "9705373d87b5fe2a",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/20/allure/#testresult/9705373d87b5fe2a",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589163784249,
          "stop" : 1589163785330,
          "duration" : 1081
        }
      }, {
        "uid" : "b8dd2c3fbfed6e2b",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/19/allure/#testresult/b8dd2c3fbfed6e2b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589113044013,
          "stop" : 1589113051130,
          "duration" : 7117
        }
      }, {
        "uid" : "a3cb1477038bc497",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/18/allure/#testresult/a3cb1477038bc497",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1588853649545,
          "stop" : 1588853650465,
          "duration" : 920
        }
      }, {
        "uid" : "f9389fc4fd2be4e",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/17/allure/#testresult/f9389fc4fd2be4e",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1588852328865,
          "stop" : 1588852330207,
          "duration" : 1342
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "af92002a1108dab9.json",
  "parameterValues" : [ ]
}