{
  "uid" : "8b42fe90b5dc3f77",
  "name" : "test_FindYourDreamHomeDropdownExist",
  "fullName" : "test_regression_suite.HeaderTests#test_FindYourDreamHomeDropdownExist",
  "historyId" : "64d2000b8f36f3b9c6b50c30a5af008a",
  "time" : {
    "start" : 1594888770075,
    "stop" : 1594889038616,
    "duration" : 268541
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000\n  (Session info: chrome=83.0.4103.116)",
  "statusTrace" : "self = <utilities.casestatus.CaseStatus object at 0x0000027F4B11A5B0>\nresult = False\nresultMessage = \"Verify that element exist under 'Find Your Dream Home' dropdown executed\"\n\n    def setResult(self, result, resultMessage):\n        try:\n            if result is not None:\n                if result:\n                    self.resultList.append(\"PASS\")\n                    self.log.info(\" ### Verification Pass :: \" + resultMessage)\n                else:\n                    self.resultList.append(\"FAIL\")\n                    self.log.info(\" ### Verification FAIL :: \" + resultMessage)\n                    self.screenShot(resultMessage)\n>                   allure.attach(self.driver.get_screenshot_as_png(),\n                                  name=resultMessage + \".\" + str(round(time.time() * 1000)),\n                                  attachment_type=AttachmentType.PNG)\n\n..\\utilities\\casestatus.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d537ca058de999d46ff65cd49e748d57\")>\n\n    def get_screenshot_as_png(self):\n        \"\"\"\n        Gets the screenshot of the current window as a binary data.\n    \n        :Usage:\n            driver.get_screenshot_as_png()\n        \"\"\"\n>       return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d537ca058de999d46ff65cd49e748d57\")>\n\n    def get_screenshot_as_base64(self):\n        \"\"\"\n        Gets the screenshot of the current window as a base64 encoded string\n           which is useful in embedded images in HTML.\n    \n        :Usage:\n            driver.get_screenshot_as_base64()\n        \"\"\"\n>       return self.execute(Command.SCREENSHOT)['value']\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d537ca058de999d46ff65cd49e748d57\")>\ndriver_command = 'screenshot', params = {}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027F4B0F4C10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B44+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000\nE         (Session info: chrome=83.0.4103.116)\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.home.header_test.HeaderTests testMethod=test_FindYourDreamHomeDropdownExist>\n\n    def test_FindYourDreamHomeDropdownExist(self):\n        result = self.hp.verifyFYDHElement()\n        self.hp.clickFindYourDreamHome()\n>       self.ts.markFinal(\"test_FindYourDreamHomeDropdownExist\", result,\n                          \"Verify that element exist under 'Find Your Dream Home' dropdown executed\")\n\nhome\\header_test.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utilities\\casestatus.py:69: in markFinal\n    self.setResult(result, resultMessage)\n..\\utilities\\casestatus.py:52: in setResult\n    allure.attach(self.driver.get_screenshot_as_png(),\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027F4B0F4C10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B44+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000\nE         (Session info: chrome=83.0.4103.116)\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1594888660076,
      "stop" : 1594888660076,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "classSetUp",
    "time" : {
      "start" : 1594888770073,
      "stop" : 1594888770073,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1594888660075,
      "stop" : 1594888660075,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "oneTimeSetUp",
    "time" : {
      "start" : 1594888660076,
      "stop" : 1594888770073,
      "duration" : 109997
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000\n  (Session info: chrome=83.0.4103.116)",
    "statusTrace" : "self = <utilities.casestatus.CaseStatus object at 0x0000027F4B11A5B0>\nresult = False\nresultMessage = \"Verify that element exist under 'Find Your Dream Home' dropdown executed\"\n\n    def setResult(self, result, resultMessage):\n        try:\n            if result is not None:\n                if result:\n                    self.resultList.append(\"PASS\")\n                    self.log.info(\" ### Verification Pass :: \" + resultMessage)\n                else:\n                    self.resultList.append(\"FAIL\")\n                    self.log.info(\" ### Verification FAIL :: \" + resultMessage)\n                    self.screenShot(resultMessage)\n>                   allure.attach(self.driver.get_screenshot_as_png(),\n                                  name=resultMessage + \".\" + str(round(time.time() * 1000)),\n                                  attachment_type=AttachmentType.PNG)\n\n..\\utilities\\casestatus.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d537ca058de999d46ff65cd49e748d57\")>\n\n    def get_screenshot_as_png(self):\n        \"\"\"\n        Gets the screenshot of the current window as a binary data.\n    \n        :Usage:\n            driver.get_screenshot_as_png()\n        \"\"\"\n>       return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d537ca058de999d46ff65cd49e748d57\")>\n\n    def get_screenshot_as_base64(self):\n        \"\"\"\n        Gets the screenshot of the current window as a base64 encoded string\n           which is useful in embedded images in HTML.\n    \n        :Usage:\n            driver.get_screenshot_as_base64()\n        \"\"\"\n>       return self.execute(Command.SCREENSHOT)['value']\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d537ca058de999d46ff65cd49e748d57\")>\ndriver_command = 'screenshot', params = {}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027F4B0F4C10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B44+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000\nE         (Session info: chrome=83.0.4103.116)\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.home.header_test.HeaderTests testMethod=test_FindYourDreamHomeDropdownExist>\n\n    def test_FindYourDreamHomeDropdownExist(self):\n        result = self.hp.verifyFYDHElement()\n        self.hp.clickFindYourDreamHome()\n>       self.ts.markFinal(\"test_FindYourDreamHomeDropdownExist\", result,\n                          \"Verify that element exist under 'Find Your Dream Home' dropdown executed\")\n\nhome\\header_test.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utilities\\casestatus.py:69: in markFinal\n    self.setResult(result, resultMessage)\n..\\utilities\\casestatus.py:52: in setResult\n    allure.attach(self.driver.get_screenshot_as_png(),\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027F4B0F4C10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77687B44+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 10.000\nE         (Session info: chrome=83.0.4103.116)\n\n..\\..\\..\\pycharmprojects\\mattamyhomes\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3f494a033252ed32",
      "name" : "log",
      "source" : "3f494a033252ed32.txt",
      "type" : "text/plain",
      "size" : 2307
    }, {
      "uid" : "eef9fccc014c072",
      "name" : "stdout",
      "source" : "eef9fccc014c072.txt",
      "type" : "text/plain",
      "size" : 22
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1594889098604,
      "stop" : 1594889098604,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "oneTimeSetUp::0",
    "time" : {
      "start" : 1594889096442,
      "stop" : 1594889098600,
      "duration" : 2158
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_regression_suite"
  }, {
    "name" : "subSuite",
    "value" : "HeaderTests"
  }, {
    "name" : "host",
    "value" : "EXIPC0154"
  }, {
    "name" : "thread",
    "value" : "17360-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_regression_suite"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "854a11b676af714a",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1594715979452,
        "stop" : 1594716023454,
        "duration" : 44002
      }
    }, {
      "uid" : "32b7d1bb714cf218",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1594553613409,
        "stop" : 1594553686003,
        "duration" : 72594
      }
    }, {
      "uid" : "a1ca82898a432e66",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1594370198967,
        "stop" : 1594370315146,
        "duration" : 116179
      }
    }, {
      "uid" : "f314cff0af68ec4e",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1594283789822,
        "stop" : 1594283803328,
        "duration" : 13506
      }
    }, {
      "uid" : "91e88e798a6a0fb0",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1594024604692,
        "stop" : 1594024622188,
        "duration" : 17496
      }
    }, {
      "uid" : "9530d63f1ddc2420",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593967942136,
        "stop" : 1593967979630,
        "duration" : 37494
      }
    }, {
      "uid" : "653a66d4a48aaf8",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593967160617,
        "stop" : 1593967175109,
        "duration" : 14492
      }
    }, {
      "uid" : "9b23acdae920cbc6",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593679384485,
        "stop" : 1593679451192,
        "duration" : 66707
      }
    }, {
      "uid" : "a7337a4a9711664c",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593420406295,
        "stop" : 1593420445412,
        "duration" : 39117
      }
    }, {
      "uid" : "4d7b628b7cf20bcb",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593334218412,
        "stop" : 1593334232724,
        "duration" : 14312
      }
    }, {
      "uid" : "f7dc55c8522652",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593315368338,
        "stop" : 1593315382430,
        "duration" : 14092
      }
    }, {
      "uid" : "6be8284aac32fffa",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593275922406,
        "stop" : 1593275936347,
        "duration" : 13941
      }
    }, {
      "uid" : "62aec34a59b5a775",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1593075196798,
        "stop" : 1593075211365,
        "duration" : 14567
      }
    }, {
      "uid" : "9f7b7328074e5747",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1592814962604,
        "stop" : 1592814999440,
        "duration" : 36836
      }
    }, {
      "uid" : "7675b11bd8c34682",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1592797559907,
        "stop" : 1592797574258,
        "duration" : 14351
      }
    }, {
      "uid" : "6ee84b5c12da0e50",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1592555794278,
        "stop" : 1592555878524,
        "duration" : 84246
      }
    }, {
      "uid" : "36574d57f432873",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1592123801102,
        "stop" : 1592123906712,
        "duration" : 105610
      }
    }, {
      "uid" : "9a6a4fa53bd3e58a",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1592046333747,
        "stop" : 1592046348404,
        "duration" : 14657
      }
    }, {
      "uid" : "a9b18e60bb5b8586",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1591951009517,
        "stop" : 1591951023648,
        "duration" : 14131
      }
    }, {
      "uid" : "4442068527b2edf5",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1591865637318,
        "stop" : 1591865651232,
        "duration" : 13914
      }
    }, {
      "uid" : "81d6956c631be285",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1591778500945,
        "stop" : 1591778564308,
        "duration" : 63363
      }
    }, {
      "uid" : "c8f1765a05b44a29",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=83.0.4103.61)",
      "time" : {
        "start" : 1591691762486,
        "stop" : 1591691762581,
        "duration" : 95
      }
    }, {
      "uid" : "3be8046ea347cd18",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1591432270280,
        "stop" : 1591432285359,
        "duration" : 15079
      }
    }, {
      "uid" : "eb7104183c5f1882",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1591087016670,
        "stop" : 1591087031206,
        "duration" : 14536
      }
    }, {
      "uid" : "8988fe054afde5f0",
      "status" : "passed",
      "time" : {
        "start" : 1591000114153,
        "stop" : 1591000115702,
        "duration" : 1549
      }
    }, {
      "uid" : "bea1a1d2fbce4d0e",
      "status" : "passed",
      "time" : {
        "start" : 1590998633770,
        "stop" : 1590998635266,
        "duration" : 1496
      }
    }, {
      "uid" : "d535c87ffeced98a",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 81",
      "time" : {
        "start" : 1590913649567,
        "stop" : 1590913649567,
        "duration" : 0
      }
    }, {
      "uid" : "b1cd94fc3e05c9e3",
      "status" : "passed",
      "time" : {
        "start" : 1590827339313,
        "stop" : 1590827340851,
        "duration" : 1538
      }
    }, {
      "uid" : "cfafc353dfa6ab9",
      "status" : "passed",
      "time" : {
        "start" : 1590740988454,
        "stop" : 1590740989115,
        "duration" : 661
      }
    }, {
      "uid" : "c073bc406f7a8fbc",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=81.0.4044.138)",
      "time" : {
        "start" : 1590654886124,
        "stop" : 1590654886284,
        "duration" : 160
      }
    }, {
      "uid" : "d24abac83604bee9",
      "status" : "passed",
      "time" : {
        "start" : 1590568907200,
        "stop" : 1590568907998,
        "duration" : 798
      }
    }, {
      "uid" : "9e6242ca6033d2b0",
      "status" : "passed",
      "time" : {
        "start" : 1590405822035,
        "stop" : 1590405823627,
        "duration" : 1592
      }
    }, {
      "uid" : "745466ce029b67cf",
      "status" : "passed",
      "time" : {
        "start" : 1590404540302,
        "stop" : 1590404541757,
        "duration" : 1455
      }
    }, {
      "uid" : "3124dfa344a675e1",
      "status" : "passed",
      "time" : {
        "start" : 1590404538324,
        "stop" : 1590404540924,
        "duration" : 2600
      }
    }, {
      "uid" : "c8658e4c1f813cf9",
      "status" : "passed",
      "time" : {
        "start" : 1589610704953,
        "stop" : 1589610705811,
        "duration" : 858
      }
    }, {
      "uid" : "91666d81270d6090",
      "status" : "passed",
      "time" : {
        "start" : 1589609716454,
        "stop" : 1589609717322,
        "duration" : 868
      }
    }, {
      "uid" : "cad49c3db64773f4",
      "status" : "passed",
      "time" : {
        "start" : 1589609462513,
        "stop" : 1589609463254,
        "duration" : 741
      }
    }, {
      "uid" : "58dc4ded29ef1a3e",
      "status" : "passed",
      "time" : {
        "start" : 1589609005952,
        "stop" : 1589609007010,
        "duration" : 1058
      }
    }, {
      "uid" : "ec8c5b6ba7c8267c",
      "status" : "broken",
      "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: 'chromedriver.exe' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home",
      "time" : {
        "start" : 1589607871868,
        "stop" : 1589607871868,
        "duration" : 0
      }
    }, {
      "uid" : "5e3d602b359d8ba7",
      "status" : "passed",
      "time" : {
        "start" : 1589606535413,
        "stop" : 1589606536176,
        "duration" : 763
      }
    }, {
      "uid" : "b91b9eb8595a5289",
      "status" : "passed",
      "time" : {
        "start" : 1589597936931,
        "stop" : 1589597937624,
        "duration" : 693
      }
    }, {
      "uid" : "56c3f52b2f65c897",
      "status" : "passed",
      "time" : {
        "start" : 1589596724953,
        "stop" : 1589596725603,
        "duration" : 650
      }
    }, {
      "uid" : "a9bd1ce256a32b6c",
      "status" : "passed",
      "time" : {
        "start" : 1589534596503,
        "stop" : 1589534597923,
        "duration" : 1420
      }
    }, {
      "uid" : "c12c852fcaf93563",
      "status" : "passed",
      "time" : {
        "start" : 1589469219346,
        "stop" : 1589469220829,
        "duration" : 1483
      }
    }, {
      "uid" : "caf472a1c643ec98",
      "status" : "passed",
      "time" : {
        "start" : 1589386820281,
        "stop" : 1589386821745,
        "duration" : 1464
      }
    }, {
      "uid" : "df349005dbeb125d",
      "status" : "passed",
      "time" : {
        "start" : 1589272268150,
        "stop" : 1589272269763,
        "duration" : 1613
      }
    }, {
      "uid" : "3321d5b049871e6f",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589258714678,
        "stop" : 1589258747333,
        "duration" : 32655
      }
    }, {
      "uid" : "a570d386cc4b9d79",
      "status" : "passed",
      "time" : {
        "start" : 1589258600381,
        "stop" : 1589258602023,
        "duration" : 1642
      }
    }, {
      "uid" : "d46c2ec2bc3919e",
      "status" : "passed",
      "time" : {
        "start" : 1589255148037,
        "stop" : 1589255149432,
        "duration" : 1395
      }
    }, {
      "uid" : "80b6bfd99c85263c",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589253234006,
        "stop" : 1589253267081,
        "duration" : 33075
      }
    }, {
      "uid" : "da8c592dadd64633",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589216167148,
        "stop" : 1589216213652,
        "duration" : 46504
      }
    }, {
      "uid" : "5a89c4b7e10a263",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589207770377,
        "stop" : 1589207829005,
        "duration" : 58628
      }
    }, {
      "uid" : "d6335d3f20deae24",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589206323185,
        "stop" : 1589206367756,
        "duration" : 44571
      }
    }, {
      "uid" : "e3092897587a843",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589205400408,
        "stop" : 1589205418062,
        "duration" : 17654
      }
    }, {
      "uid" : "fce786034b116761",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589203344393,
        "stop" : 1589203405241,
        "duration" : 60848
      }
    }, {
      "uid" : "11dcc04b35f68786",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589163837663,
        "stop" : 1589163924197,
        "duration" : 86534
      }
    }, {
      "uid" : "c96dd9c9d39a7dde",
      "status" : "passed",
      "time" : {
        "start" : 1589113110076,
        "stop" : 1589113113363,
        "duration" : 3287
      }
    }, {
      "uid" : "905de18e972a438e",
      "status" : "passed",
      "time" : {
        "start" : 1588853743153,
        "stop" : 1588853744608,
        "duration" : 1455
      }
    }, {
      "uid" : "7752f14f158b0382",
      "status" : "passed",
      "time" : {
        "start" : 1588852431212,
        "stop" : 1588852432830,
        "duration" : 1618
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 50,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 26,
        "unknown" : 0,
        "total" : 80
      },
      "items" : [ {
        "uid" : "a771257295fd9cae",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/98/allure/#testresult/a771257295fd9cae",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594715979452,
          "stop" : 1594716023454,
          "duration" : 44002
        }
      }, {
        "uid" : "53f6b7003d3ecca1",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/97/allure/#testresult/53f6b7003d3ecca1",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594715979452,
          "stop" : 1594716023454,
          "duration" : 44002
        }
      }, {
        "uid" : "d2f17e370dbe4c96",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/96/allure/#testresult/d2f17e370dbe4c96",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594553613409,
          "stop" : 1594553686003,
          "duration" : 72594
        }
      }, {
        "uid" : "9f70cbc4d6cd98bb",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/95/allure/#testresult/9f70cbc4d6cd98bb",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594553613409,
          "stop" : 1594553686003,
          "duration" : 72594
        }
      }, {
        "uid" : "c89d2952a5fe248f",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/94/allure/#testresult/c89d2952a5fe248f",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594370198967,
          "stop" : 1594370315146,
          "duration" : 116179
        }
      }, {
        "uid" : "e4d2a75b9bae7d47",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/93/allure/#testresult/e4d2a75b9bae7d47",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594370198967,
          "stop" : 1594370315146,
          "duration" : 116179
        }
      }, {
        "uid" : "40848e2b43c45d3f",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/92/allure/#testresult/40848e2b43c45d3f",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594283789822,
          "stop" : 1594283803328,
          "duration" : 13506
        }
      }, {
        "uid" : "61b30d0d0a8b327d",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/91/allure/#testresult/61b30d0d0a8b327d",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594024604692,
          "stop" : 1594024622188,
          "duration" : 17496
        }
      }, {
        "uid" : "29eb5d99dc1331b2",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/90/allure/#testresult/29eb5d99dc1331b2",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594024604692,
          "stop" : 1594024622188,
          "duration" : 17496
        }
      }, {
        "uid" : "61fbd950719270de",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/89/allure/#testresult/61fbd950719270de",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1594024604692,
          "stop" : 1594024622188,
          "duration" : 17496
        }
      }, {
        "uid" : "f5bf3e390f4ab26d",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/88/allure/#testresult/f5bf3e390f4ab26d",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593967942136,
          "stop" : 1593967979630,
          "duration" : 37494
        }
      }, {
        "uid" : "df7a88892e8e1598",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/87/allure/#testresult/df7a88892e8e1598",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593967160617,
          "stop" : 1593967175109,
          "duration" : 14492
        }
      }, {
        "uid" : "6b445342272c2f60",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/86/allure/#testresult/6b445342272c2f60",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593679384485,
          "stop" : 1593679451192,
          "duration" : 66707
        }
      }, {
        "uid" : "cd6e550f4ed688e0",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/85/allure/#testresult/cd6e550f4ed688e0",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593679384485,
          "stop" : 1593679451192,
          "duration" : 66707
        }
      }, {
        "uid" : "ba302f94e887fd60",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/84/allure/#testresult/ba302f94e887fd60",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593420406295,
          "stop" : 1593420445412,
          "duration" : 39117
        }
      }, {
        "uid" : "c3b8b83ca263c34b",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/83/allure/#testresult/c3b8b83ca263c34b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593420406295,
          "stop" : 1593420445412,
          "duration" : 39117
        }
      }, {
        "uid" : "90a16164d96eb5f4",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/82/allure/#testresult/90a16164d96eb5f4",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593420406295,
          "stop" : 1593420445412,
          "duration" : 39117
        }
      }, {
        "uid" : "12578a4dd9e65579",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/81/allure/#testresult/12578a4dd9e65579",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593334218412,
          "stop" : 1593334232724,
          "duration" : 14312
        }
      }, {
        "uid" : "c684a0f6a1d55ebf",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/80/allure/#testresult/c684a0f6a1d55ebf",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593315368338,
          "stop" : 1593315382430,
          "duration" : 14092
        }
      }, {
        "uid" : "1fb8faf7fe0f5167",
        "reportUrl" : "http://localhost:9090/jenkins/job/MattamyAutomationFramework/79/allure/#testresult/1fb8faf7fe0f5167",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1593275922406,
          "stop" : 1593275936347,
          "duration" : 13941
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8b42fe90b5dc3f77.json",
  "parameterValues" : [ ]
}