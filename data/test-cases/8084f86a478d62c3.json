{
  "uid" : "8084f86a478d62c3",
  "name" : "test_careersLink",
  "fullName" : "test_regression_suite.FooterTests#test_careersLink",
  "historyId" : "a3bacc9480c7ae49972e15fc6e525495",
  "time" : {
    "start" : 1589255113847,
    "stop" : 1589255114808,
    "duration" : 961
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_careersLink>\n\n    def test_careersLink(self):\n        result = self.fp.getCareersLinkStatus()\n>       self.ts.markFinal(\"test_careersLink\", result, \"Footer_Verified Careers Link\")\n\nhome\\footer_test.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x04989FB0>\ntestName = 'test_careersLink', result = False\nresultMessage = 'Footer_Verified Careers Link'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1589255098291,
      "stop" : 1589255098291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "oneTimeSetUp",
    "time" : {
      "start" : 1589255098291,
      "stop" : 1589255112136,
      "duration" : 13845
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1589255098290,
      "stop" : 1589255098291,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "classSetUp",
    "time" : {
      "start" : 1589255113845,
      "stop" : 1589255113845,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_careersLink>\n\n    def test_careersLink(self):\n        result = self.fp.getCareersLinkStatus()\n>       self.ts.markFinal(\"test_careersLink\", result, \"Footer_Verified Careers Link\")\n\nhome\\footer_test.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x04989FB0>\ntestName = 'test_careersLink', result = False\nresultMessage = 'Footer_Verified Careers Link'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4c8991da018a454e",
      "name" : "Footer_Verified Careers Link.1589255114804",
      "source" : "4c8991da018a454e.png",
      "type" : "image/png",
      "size" : 41938
    }, {
      "uid" : "b41361934c8906c0",
      "name" : "log",
      "source" : "b41361934c8906c0.txt",
      "type" : "text/plain",
      "size" : 1417
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "oneTimeSetUp::0",
    "time" : {
      "start" : 1589255134353,
      "stop" : 1589255136655,
      "duration" : 2302
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1589255136665,
      "stop" : 1589255136665,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_regression_suite"
  }, {
    "name" : "subSuite",
    "value" : "FooterTests"
  }, {
    "name" : "host",
    "value" : "EXIPC0154"
  }, {
    "name" : "thread",
    "value" : "7652-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_regression_suite"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "16b46b08d839b702",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589253198678,
        "stop" : 1589253199647,
        "duration" : 969
      }
    }, {
      "uid" : "82bf7aa104176f01",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589216113609,
        "stop" : 1589216114485,
        "duration" : 876
      }
    }, {
      "uid" : "188ad0401037df55",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589207718922,
        "stop" : 1589207719699,
        "duration" : 777
      }
    }, {
      "uid" : "34ef4105654515f8",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589206267755,
        "stop" : 1589206268546,
        "duration" : 791
      }
    }, {
      "uid" : "1deb1612bfedc8de",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589205342539,
        "stop" : 1589205343747,
        "duration" : 1208
      }
    }, {
      "uid" : "13580f4dbc0910fb",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589203292380,
        "stop" : 1589203293251,
        "duration" : 871
      }
    }, {
      "uid" : "4f0ef679bbdbbe0b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589163785367,
        "stop" : 1589163786325,
        "duration" : 958
      }
    }, {
      "uid" : "a3961431a3a77f7b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589113051166,
        "stop" : 1589113052605,
        "duration" : 1439
      }
    }, {
      "uid" : "abd9565fc8984cf7",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1588853650502,
        "stop" : 1588853651285,
        "duration" : 783
      }
    }, {
      "uid" : "f5c629880ee38fe6",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1588852330262,
        "stop" : 1588852331179,
        "duration" : 917
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 11,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 11
      },
      "items" : [ {
        "uid" : "51e9f1bc23ad2557",
        "reportUrl" : "http://localhost:8080/job/MattamyAutomationFramework/26/allure/#testresult/51e9f1bc23ad2557",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589253198678,
          "stop" : 1589253199647,
          "duration" : 969
        }
      }, {
        "uid" : "6c50e6b3454df9b1",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/25/allure/#testresult/6c50e6b3454df9b1",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589216113609,
          "stop" : 1589216114485,
          "duration" : 876
        }
      }, {
        "uid" : "8ce569f03ca1d053",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/24/allure/#testresult/8ce569f03ca1d053",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589207718922,
          "stop" : 1589207719699,
          "duration" : 777
        }
      }, {
        "uid" : "86c6f0dd2072e708",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/23/allure/#testresult/86c6f0dd2072e708",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589206267755,
          "stop" : 1589206268546,
          "duration" : 791
        }
      }, {
        "uid" : "c92964bf7e5599e2",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/22/allure/#testresult/c92964bf7e5599e2",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589205342539,
          "stop" : 1589205343747,
          "duration" : 1208
        }
      }, {
        "uid" : "292c79ffd74067b7",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/21/allure/#testresult/292c79ffd74067b7",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589203292380,
          "stop" : 1589203293251,
          "duration" : 871
        }
      }, {
        "uid" : "d4797321b0c5d32a",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/20/allure/#testresult/d4797321b0c5d32a",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589163785367,
          "stop" : 1589163786325,
          "duration" : 958
        }
      }, {
        "uid" : "93a1c98f8b9a3b6b",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/19/allure/#testresult/93a1c98f8b9a3b6b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589113051166,
          "stop" : 1589113052605,
          "duration" : 1439
        }
      }, {
        "uid" : "a9dc025ac0c828bc",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/18/allure/#testresult/a9dc025ac0c828bc",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1588853650502,
          "stop" : 1588853651285,
          "duration" : 783
        }
      }, {
        "uid" : "8a21ed6c88fe8b9b",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/17/allure/#testresult/8a21ed6c88fe8b9b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1588852330262,
          "stop" : 1588852331179,
          "duration" : 917
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8084f86a478d62c3.json",
  "parameterValues" : [ ]
}