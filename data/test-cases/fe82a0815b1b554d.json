{
  "uid" : "fe82a0815b1b554d",
  "name" : "test_privacyPolicyLink",
  "fullName" : "test_regression_suite.FooterTests#test_privacyPolicyLink",
  "historyId" : "b1f18d70ace4899566611e7531314bd9",
  "time" : {
    "start" : 1589255131162,
    "stop" : 1589255132071,
    "duration" : 909
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_privacyPolicyLink>\n\n    def test_privacyPolicyLink(self):\n        result = self.fp.getPrivacyLinkStatus()\n>       self.ts.markFinal(\"test_privacyPolicyLink\", result, \"Footer_Verified Privacy Policy Link\")\n\nhome\\footer_test.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x049D2E30>\ntestName = 'test_privacyPolicyLink', result = False\nresultMessage = 'Footer_Verified Privacy Policy Link'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "classSetUp",
    "time" : {
      "start" : 1589255131161,
      "stop" : 1589255131161,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "browser",
    "time" : {
      "start" : 1589255098291,
      "stop" : 1589255098291,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "oneTimeSetUp",
    "time" : {
      "start" : 1589255098291,
      "stop" : 1589255112136,
      "duration" : 13845
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1589255098290,
      "stop" : 1589255098291,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <tests.home.footer_test.FooterTests testMethod=test_privacyPolicyLink>\n\n    def test_privacyPolicyLink(self):\n        result = self.fp.getPrivacyLinkStatus()\n>       self.ts.markFinal(\"test_privacyPolicyLink\", result, \"Footer_Verified Privacy Policy Link\")\n\nhome\\footer_test.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utilities.casestatus.CaseStatus object at 0x049D2E30>\ntestName = 'test_privacyPolicyLink', result = False\nresultMessage = 'Footer_Verified Privacy Policy Link'\n\n    def markFinal(self, testName, result, resultMessage):\n        \"\"\"\n        Mark the final result of verification point in a test case\n        This needs to be called at least once in a test case\n        This should be final test status of the test case\n        \"\"\"\n        self.setResult(result, resultMessage)\n    \n        if \"FAIL\" in self.resultList:\n            self.log.error(testName + \" Test Failed\")\n            self.resultList.clear()\n>           assert True == False\nE           AssertionError\n\n..\\utilities\\casestatus.py:74: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4f2c95979c26e765",
      "name" : "Footer_Verified Privacy Policy Link.1589255132067",
      "source" : "4f2c95979c26e765.png",
      "type" : "image/png",
      "size" : 41941
    }, {
      "uid" : "9d81615553f9b222",
      "name" : "log",
      "source" : "9d81615553f9b222.txt",
      "type" : "text/plain",
      "size" : 1451
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "oneTimeSetUp::0",
    "time" : {
      "start" : 1589255134353,
      "stop" : 1589255136655,
      "duration" : 2302
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1589255136665,
      "stop" : 1589255136665,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_regression_suite"
  }, {
    "name" : "subSuite",
    "value" : "FooterTests"
  }, {
    "name" : "host",
    "value" : "EXIPC0154"
  }, {
    "name" : "thread",
    "value" : "7652-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_regression_suite"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "f6381f26507c0896",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589253215975,
        "stop" : 1589253217117,
        "duration" : 1142
      }
    }, {
      "uid" : "7da4f7686286264b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589216129025,
        "stop" : 1589216129838,
        "duration" : 813
      }
    }, {
      "uid" : "ea76d0c6866b4c47",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589207739519,
        "stop" : 1589207740320,
        "duration" : 801
      }
    }, {
      "uid" : "d98f501d95a1c6ba",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589206288861,
        "stop" : 1589206289657,
        "duration" : 796
      }
    }, {
      "uid" : "854c972bec66230b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589205361748,
        "stop" : 1589205362612,
        "duration" : 864
      }
    }, {
      "uid" : "4ab7b1582bac418",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589203309624,
        "stop" : 1589203310462,
        "duration" : 838
      }
    }, {
      "uid" : "51174197fdc86a34",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589163802743,
        "stop" : 1589163803615,
        "duration" : 872
      }
    }, {
      "uid" : "12f1a1eb58f7103b",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1589113071837,
        "stop" : 1589113072783,
        "duration" : 946
      }
    }, {
      "uid" : "25d03e052f1dae67",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1588853678758,
        "stop" : 1588853679538,
        "duration" : 780
      }
    }, {
      "uid" : "d953708981504f5d",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1588852352716,
        "stop" : 1588852353685,
        "duration" : 969
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 11,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 11
      },
      "items" : [ {
        "uid" : "19aae69934dbc0a9",
        "reportUrl" : "http://localhost:8080/job/MattamyAutomationFramework/26/allure/#testresult/19aae69934dbc0a9",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589253215975,
          "stop" : 1589253217117,
          "duration" : 1142
        }
      }, {
        "uid" : "d07a703505a73f1a",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/25/allure/#testresult/d07a703505a73f1a",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589216129025,
          "stop" : 1589216129838,
          "duration" : 813
        }
      }, {
        "uid" : "1d392a0b1a13554b",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/24/allure/#testresult/1d392a0b1a13554b",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589207739519,
          "stop" : 1589207740320,
          "duration" : 801
        }
      }, {
        "uid" : "7a7f5e69cb2c80e5",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/23/allure/#testresult/7a7f5e69cb2c80e5",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589206288861,
          "stop" : 1589206289657,
          "duration" : 796
        }
      }, {
        "uid" : "488c930a1c770bf7",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/22/allure/#testresult/488c930a1c770bf7",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589205361748,
          "stop" : 1589205362612,
          "duration" : 864
        }
      }, {
        "uid" : "38449fd30d9bd64d",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/21/allure/#testresult/38449fd30d9bd64d",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589203309624,
          "stop" : 1589203310462,
          "duration" : 838
        }
      }, {
        "uid" : "9a044605139a40ba",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/20/allure/#testresult/9a044605139a40ba",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589163802743,
          "stop" : 1589163803615,
          "duration" : 872
        }
      }, {
        "uid" : "a4e2965182ca97db",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/19/allure/#testresult/a4e2965182ca97db",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1589113071837,
          "stop" : 1589113072783,
          "duration" : 946
        }
      }, {
        "uid" : "b9cc5058bcbab308",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/18/allure/#testresult/b9cc5058bcbab308",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1588853678758,
          "stop" : 1588853679538,
          "duration" : 780
        }
      }, {
        "uid" : "8aed02a4b64b79e4",
        "reportUrl" : "http://localhost:8080/job/MattamyHomes/17/allure/#testresult/8aed02a4b64b79e4",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1588852352716,
          "stop" : 1588852353685,
          "duration" : 969
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fe82a0815b1b554d.json",
  "parameterValues" : [ ]
}